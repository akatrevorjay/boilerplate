#!/bin/bash
set -eo pipefail
. "$IMAGE_ROOT/lib.sh"

# Use dumb-init by default on exec from init, but allow
# it to be replaced.
: ${ENTRYPOINT_EXEC_PREFIX:="dumb-init --single-child"}

# assertion
: ${ENTRYPOINT_PATH:?}

entrypoint-hook() {
	if [[ $# -gt 1 ]]; then
		local arg

		for arg in "$@"; do
			entrypoint-hook "$hook"
		done

		return
	fi

	local hook="$1"; shift
	debug "Hook: $hook"

	local entrypoint_paths=(${ENTRYPOINT_PATH//:/ })

	local path= hook_path=
	for path in "${entrypoint_paths[@]}"; do
		hook_path="$path/hook_$hook"
		if [[ -x "$hook_path" ]]; then
			e "Hook %s: exec %s" "$hook" "$hook_path"
			"$hook_path"
		elif [[ -e "$hook_path" ]]; then
			e "Hook %s: source %s" "$hook" "$hook_path"
			source "$hook_path"
		fi
	done
}

entrypoint-find() {
	# Find if any entrypoints exist with this name
	# This way we don't add ENTRYPOINT_PATH to PATH
	local which=$(which which)  # Nab the abs path
	PATH="$ENTRYPOINT_PATH" "$which" "$1" 2>/dev/null
}

entrypoint-exec() {
	local entrypoint_command=("$@")

	local entrypoint_prefix=()
	if pid_is_init && [[ ${#entrypoint_command[@]} -gt 0 ]]; then
		entrypoint_prefix+=(${ENTRYPOINT_EXEC_PREFIX})
	fi

	local entrypoint=$(entrypoint-find "$1" || :)
	if [[ -n "$entrypoint" ]]; then
		debug "entrypoint: %s=%s" "$1" "$entrypoint"

		# Replace first element with the full path to the entrypoint, keep the rest
		entrypoint_command[0]="$entrypoint"

		entrypoint-hook "entrypoint_${entrypoint##*/}" "entrypoint"
	fi

	entrypoint-hook "exec_$1" "exec"
	debug_call exec "${entrypoint_prefix[@]}" "${entrypoint_command[@]}"
}

entrypoint() {
	entrypoint-hook "init"

	# Env hook
	[[ -z "$APP_ENV" ]] || entrypoint-hook "env_$APP_ENV"

	at-runtime-exec || error "Error running at-runtime-exec rv=%s" "$?"

	entrypoint-exec "$@"
}

# magic af
"${0##*/}" "$@"
