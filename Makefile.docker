# Do not:
# o  use make's built-in rules and variables
#    (this increases performance and avoids hard-to-debug behaviour);
# o  print "Entering directory ...";
MAKEFLAGS += -rR --no-print-directory --warn-undefined-variables

DOCKER_USER ?= $(USER)
DOCKER_REPO ?= $(subst docker-,,$(notdir $(abspath .)))
REPO ?= ${DOCKER_USER}/${DOCKER_REPO}

# latest == LTS
# rolling == Latest release
# devel == Latest development release
UBUNTU_TAGS := latest rolling devel xenial bionic disco
TAGS ?= $(UBUNTU_TAGS)

BUILD_TAG_PREFIX ?= build-

all: build

##
## Host build deps
##

HOST_BIN ?= host/bin

REPO_${HOST_BIN}/prefixout ?= github.com/akatrevorjay/$(notdir $@)
HOST_GOLANG_DEPS += ${HOST_BIN}/prefixout

HOST_DEPS += ${HOST_GOLANG_DEPS}

HOST_GOLANG_IMAGE = golang:1.10
HOST_GOLANG_BUILD_CMD ?= \
	docker create -v /go/bin --name host-golang-build-out-$(notdir $@) busybox:latest /bin/true \
	&& ( \
	  docker run --rm --volumes-from host-golang-build-out-$(notdir $@) ${HOST_GOLANG_IMAGE} go get -u -v $(REPO_$@) \
	  && docker cp host-golang-build-out-$(notdir $@):/go/bin/$(notdir $@) $(abspath ${HOST_BIN}) \
	); \
	docker rm host-golang-build-out-$(notdir $@)

${HOST_GOLANG_DEPS}:
	${HOST_GOLANG_BUILD_CMD}
	test -e "$@"

##
## If we have project-level deps, we should likely build them I suppose.
##

ifneq ("$(wildcard Makefile.deps)","")
include Makefile.deps
endif

##
## Single
##

RUN_CMDS := bash bash-verbose bash-debug bash-trace
.PHONY: ${RUN_CMDS}

# default tag
TAG ?= $(firstword $(TAGS))

${RUN_CMDS}: TAGS = $(TAG)
${RUN_CMDS}: CMD = bash
${RUN_CMDS}: run

export ENTRYPOINT_DEBUG ENTRYPOINT_VERBOSE ENTRYPOINT_TRACE
bash-debug:		ENTRYPOINT_DEBUG=1
bash-verbose:	ENTRYPOINT_VERBOSE=1
bash-trace:		ENTRYPOINT_TRACE=1

RUN_CMD ?= docker run -it --rm -v ${PWD}:/app

run: build
	${RUN_CMD} \
		-e ENTRYPOINT_VERBOSE=${ENTRYPOINT_VERBOSE} \
		-e ENTRYPOINT_DEBUG=${ENTRYPOINT_DEBUG} \
		-e ENTRYPOINT_TRACE=${ENTRYPOINT_TRACE} \
		"${REPO}:${BUILD_TAG_PREFIX}${TAG}" \
		${CMD}


##
## Lifecycle
##

.PHONY: $(TAGS)
.PHONY: all clean deps build test tag push

clean:
	rm -rf $(addprefix Dockerfile.,$(TAGS))

distclean: clean
	rm -rf ${HOST_DEPS} ${DEPS}

deps: ${HOST_DEPS} ${DEPS}

BUILD_ARGS ?=

$(TAGS): Dockerfile deps
	-echo -- $@: REPO=${REPO} TAG=${TAG} BUILD_TAG=${BUILD_TAG_PREFIX}$@ >&2
	"${HOST_BIN}/prefixout" -dtc --prefix "[$@] " -- \
	  docker build \
	  ${BUILD_ARGS} \
	  -t "${REPO}:${BUILD_TAG_PREFIX}$@" \
	  .

build: $(TAGS)
	@echo "-- $@: TAGS=${TAGS}" >&2

test: build
	for TAG in $(TAGS); do \
		BUILD_TAG="${BUILD_TAG_PREFIX}$${TAG}"; \
		IMAGE="${REPO}:$${BUILD_TAG}"; \
		\
		./tests/run-tests "$$IMAGE"; \
	done

tag: build
	for TAG in $(TAGS) $(EXTRA_TAGS); do \
		SRC_TAG="$${TAG#*=}"; \
		TAG="$${TAG%=*}"; \
		BUILD_TAG="${BUILD_TAG_PREFIX}$${SRC_TAG}"; \
		echo "-- $@: [$${SRC_TAG}=$${TAG}] BUILD_TAG=$${BUILD_TAG}" >&2; \
		\
		"${HOST_BIN}/prefixout" -dtc --prefix "[$${TAG}] " -- \
			docker tag "${REPO}:$${BUILD_TAG}" "${REPO}:$${TAG}"; \
	done

push: tag
	for TAG in $(TAGS) $(EXTRA_TAGS); do \
		SRC_TAG="$${TAG#*=}"; \
		TAG="$${TAG%=*}"; \
		BUILD_TAG="${BUILD_TAG_PREFIX}$${SRC_TAG}"; \
		echo "-- $@: [$${SRC_TAG}=$${TAG}] BUILD_TAG=$${BUILD_TAG}" >&2; \
		\
		"${HOST_BIN}/prefixout" -dtc --prefix "[$${TAG}] " -- \
			docker push "${REPO}:$${TAG}"; \
	done

